#!/usr/bin/Rscript


################# Requirements #########################
# optparse
#     install.packages("optparse")
#         OptionParser(usage = "usage: \%prog [options]", option_list = list(),
#                      add_help_option = TRUE, prog = NULL, description = "",
#                      epilogue = "")
if(! require("optparse")) install.packages("optparse")
library(optparse)
if(! require("ggplot2")) install.packages("ggplot2")
if(! require(ChIPseeker))
    if (! requireNamespace("BiocManager", quietly = FALSE))
        install.packages("BiocManager")
    BiocManager::install("ChIPseeker")


#注意，这个模块不用加上-h的flag，不然会报错
option_list = list(
#    make_option(c("-f", "--file"), type="logical/integer/double/complex/character", default=NULL, 
#              action = "store", dest=file, help="Input File[default= \%default]", metavar="character"),
    make_option(c("-x", "--bed1"), type="character", default=NULL, 
              action = "store", help="Input BED File 1[default= \%default]", metavar="character"),
    make_option(c("-y", "--bed2"), type="character", default=NULL, 
              action = "store", help="Input BED File 2[default= \%default]", metavar="character"),
    make_option(c("-f", "--gff1"), type="character", default=NULL, 
              action = "store", help="GFF File 1[default= \%default]", metavar="character"),
    make_option(c("-g", "--gff2"), type="character", default=NULL, 
              action = "store", help="GFF File 2[default= \%default]", metavar="character"),
    make_option(c("-e", "--gff3"), type="character", default=NULL, 
              action = "store", help="Merged GFF[default= \%default]", metavar="character"),
    make_option(c("-a", "--prefix1"), type="character", default=NULL, 
              action = "store", help="Output prefix 1[default= \%default]", metavar="character"),
    make_option(c("-b", "--prefix2"), type="character", default=NULL, 
              action = "store", help="Output prefix 2[default= \%default]", metavar="character"),
  );

#opt = parse_args(OptionParser(option_list=option_list, usage = "This Script is a test for arguments!"))
opt_parser=OptionParser(option_list=option_list, usage = "This Script is  to display blast results!")
opt = parse_args(opt_parser)

if (is.null(opt$f)){
	print_help(opt_parser)
	stop("Error: invalid input file", call.=FALSE)
}


library(ggplot2)
library(ChIPseeker)


### Preliminary plot
#covplot(peak, weightCol="V5") + facet_grid(chr ~ .id)
setEPS()
postscript("opt$a.eps")
covplot(opt$x, weightCol="V5", xlab = "Chromosome Position (bp)", ylab = "Int(-10*log10qvalue)", title = "ATAC-seq Peaks")
dev.off()


setEPS()
postscript("opt$b.eps")
covplot(opt$y, weightCol="V5", xlab = "Chromosome Position (bp)", ylab = "Int(-10*log10qvalue)", title = "ATAC-seq Peaks")
dev.off()

setEPS()
postscript(paste(opt$a, ".vs.", opt$b, ".covplot.eps", sep=""))
peak=GenomicRanges::GRangesList(opt$a=readPeakFile(opt$x),opt$b=readPeakFile(opt$y))
covplot(peak, weightCol="V5", xlab = "Chromosome Position (bp)", ylab = "Int(-10*log10qvalue)", title = "ATAC-seq Peaks")
dev.off()



library(GenomicFeatures)



### 111
#myTxDB1 <- makeTxDbFromGFF(opt$f, format="gff3", dataSource=NA, organism="Triticum aestivum", taxonomyId=4565, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
myTxDB1 <- makeTxDbFromGFF(opt$f, format="gff3", dataSource=NA, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
Annot1 = annotatePeak(opt$x, tssRegion = c(-3000, 3000), TxDb = myTxDB1, level = "transcript", assignGenomicAnnotation = TRUE, genomicAnnotationPriority = c("Promoter", "5UTR", "3UTR", "Exon", "Intron", "Downstream", "Intergenic"), annoDb = NULL, addFlankGeneInfo = TRUE, flankDistance = 5000, sameStrand = FALSE, ignoreOverlap = FALSE, ignoreUpstream = FALSE, ignoreDownstream = FALSE, overlap = "TSS", verbose = TRUE)
write.table(as.data.frame(Annot1), file = paste(opt$a, ".annot.txt", sep = ""), append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NaN", dec = ".", row.names = FALSE, col.names = TRUE, qmethod = c("escape", "double"), fileEncoding = "UTF-8")
setEPS()
postscript(paste(opt$a, ".annot.pie.eps", sep = ""))
plotAnnoPie(Annot1)
dev.off()
setEPS()
postscript(paste(opt$a, ".annot.bar.eps", sep = ""))
plotAnnoBar(Annot1)
dev.off()
cairo_ps(filename=paste(opt$a, ".annot.upsetplotPLUSvennpie.eps", sep = ""), width=10, height=10)
upsetplot(Annot1, vennpie=TRUE)
dev.off()
setEPS()
postscript(paste(opt$a, ".distToTSS.eps", sep = ""))
plotDistToTSS(Annot1, title="Distribution of transcription factor-binding loci\nrelative to TSS")
dev.off()
setEPS()
postscript(paste(opt$a, ".dist.eps", sep = ""))
peak1 <- readPeakFile(opt$x)
promoter <- getPromoters(TxDb=myTxDB1, upstream=3000, downstream=3000)
tagMatrix <- getTagMatrix(peak1, windows=promoter)
peakHeatmap(opt$x, weightCol="V5", TxDb=myTxDB1, upstream=3000, downstream=3000)
dev.off()
setEPS()
postscript(paste(opt$a, ".freq.eps", sep = ""))
plotAvgProf(tagMatrix, xlim=c(-3000, 3000), xlab="Genomic Region (5'->3')", ylab = "Read Count Frequency")
dev.off()



###222
#myTxDB2 <- makeTxDbFromGFF(opt$g, format="gff3", dataSource=NA, organism="Triticum aestivum", taxonomyId=4565, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
myTxDB2 <- makeTxDbFromGFF(opt$g, format="gff3", dataSource=NA, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
Annot2 = annotatePeak(opt$y, tssRegion = c(-3000, 3000), TxDb = myTxDB2, level = "transcript", assignGenomicAnnotation = TRUE, genomicAnnotationPriority = c("Promoter", "5UTR", "3UTR", "Exon", "Intron", "Downstream", "Intergenic"), annoDb = NULL, addFlankGeneInfo = TRUE, flankDistance = 5000, sameStrand = FALSE, ignoreOverlap = FALSE, ignoreUpstream = FALSE, ignoreDownstream = FALSE, overlap = "TSS", verbose = TRUE)
write.table(as.data.frame(Annot2), file = paste(opt$b, ".annot.txt", sep = ""), append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NaN", dec = ".", row.names = FALSE, col.names = TRUE, qmethod = c("escape", "double"), fileEncoding = "UTF-8")
setEPS()
postscript(paste(opt$b, ".annot.pie.eps", sep = ""))
plotAnnoPie(Annot2)
dev.off()
setEPS()
postscript(paste(opt$b, ".annot.bar.eps", sep = ""))
plotAnnoBar(Annot2)
dev.off()
cairo_ps(filename=paste(opt$b, ".annot.upsetplotPLUSvennpie.eps", sep = ""), width=10, height=10)
upsetplot(Annot2, vennpie=TRUE)
dev.off()
setEPS()
postscript(paste(opt$b, ".distToTSS.eps", sep = ""))
plotDistToTSS(Annot2, title="Distribution of transcription factor-binding loci\nrelative to TSS")
dev.off()
setEPS()
postscript(paste(opt$b, ".dist.eps", sep = ""))
peak2 <- readPeakFile(opt$y)
promoter <- getPromoters(TxDb=myTxDB2, upstream=3000, downstream=3000)
tagMatrix <- getTagMatrix(peak2, windows=promoter)
peakHeatmap(opt$y, weightCol="V5", TxDb=myTxDB2, upstream=3000, downstream=3000)
dev.off()
setEPS()
postscript(paste(opt$b, ".freq.eps", sep = ""))
plotAvgProf(tagMatrix, xlim=c(-3000, 3000), xlab="Genomic Region (5'->3')", ylab = "Read Count Frequency")
dev.off()



### Merge
#myTxDB <- makeTxDbFromGFF(opt$e, format="gff3", dataSource=NA, organism="Triticum aestivum", taxonomyId=4565, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
myTxDB <- makeTxDbFromGFF(opt$e, format="gff3", dataSource=NA, circ_seqs=DEFAULT_CIRC_SEQS, chrominfo=NULL, miRBaseBuild=NA)
### Comparison
peakAnnoList <- lapply(list(opt$a=opt$x, opt$b=opt$y), annotatePeak, TxDb=myTxDB,tssRegion=c(-3000, 3000))
setEPS()
postscript(paste(opt$a, ".vs.", opt$b, ".feature.dist.eps", sep=""))
plotAnnoBar(peakAnnoList)
dev.off()
setEPS()
postscript(paste(opt$a, ".vs.", opt$b, ".feature.dist.eps", sep=""))
plotDistToTSS(peakAnnoList)
dev.off()
